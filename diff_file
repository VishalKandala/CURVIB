diff --git a/ibm.c b/ibm.c
index 829956b..ac23e63 100644
--- a/ibm.c
+++ b/ibm.c
@@ -19,9 +19,10 @@ PetscInt point_cell_thin(Cmpnts p,Cmpnts p1,Cmpnts p2,Cmpnts p3,Cmpnts p4,
 PetscInt point_cell_advanced(Cmpnts p, PetscInt ip, PetscInt jp, PetscInt kp,
 			     IBMNodes *ibm, PetscInt ncx, PetscInt ncy,
 			     PetscInt ncz, PetscReal dcx, PetscReal dcy,
-			     PetscReal xbp_min, PetscReal ybp_min,
+                             PetscReal dcz,PetscReal xbp_min, PetscReal ybp_min,
+                             PetscReal zbp_min,PetscReal xbp_max,PetscReal ybp_max,
 			     PetscReal zbp_max, List *cell_trg,
-			     PetscInt flg);
+			     PetscInt flg, char *search_dir);
 
 void wall_function_loglaw (UserCtx *user, double ks, double sc, double sb, 
 			   Cmpnts Ua, Cmpnts Uc, Cmpnts *Ub, PetscReal *ustar, 
@@ -55,7 +56,7 @@ PetscReal detmnt(PetscReal a[3][3])
   return tmp;
 }
 
-PetscErrorCode randomdirection(Cmpnts p, PetscInt ip, PetscInt jp,
+PetscErrorCode randomdirection_Z(Cmpnts p, PetscInt ip, PetscInt jp,
 			       PetscReal xbp_min, PetscReal ybp_min,
 			       PetscReal zbp_max, PetscReal dcx, PetscReal dcy,
 			       PetscReal dir[3],PetscInt seed)
@@ -63,8 +64,7 @@ PetscErrorCode randomdirection(Cmpnts p, PetscInt ip, PetscInt jp,
   Cmpnts endpoint;
   PetscReal s;
 
-  PetscReal xpc, ypc; 
-  
+  PetscReal xpc, ypc;  
   xpc = dcx * (ip+0.5) + xbp_min;
   ypc = dcy * (jp+0.5) + ybp_min;
     
@@ -88,6 +88,38 @@ PetscErrorCode randomdirection(Cmpnts p, PetscInt ip, PetscInt jp,
   return 0;
 }
 
+PetscErrorCode randomdirection_Y(Cmpnts p, PetscInt ip, PetscInt kp,
+			       PetscReal xbp_min, PetscReal zbp_min,
+			       PetscReal ybp_max, PetscReal dcx, PetscReal dcz,
+			       PetscReal dir[3],PetscInt seed)
+{
+  Cmpnts endpoint;
+  PetscReal s;
+
+  PetscReal xpc, zpc;  
+  xpc = dcx * (ip+0.5) + xbp_min;
+  zpc = dcz * (kp+0.5) + zbp_min;
+    
+  // init rand()
+  //  srand(time(NULL)+seed);
+  srand(seed);
+  // Generate a random number [-0.5, 0.5)
+  s = rand() / ((double)RAND_MAX + 1) - 0.5;
+  endpoint.x = xpc + s * dcx;
+  endpoint.z = zpc + s * dcz;
+  endpoint.y = ybp_max + 0.2;
+
+  dir[0] = endpoint.x - p.x;
+  dir[1] = endpoint.y - p.y;
+  dir[2] = endpoint.z - p.z;
+
+  s = sqrt(dir[0]*dir[0] + dir[1]*dir[1] + dir[2]*dir[2]);
+  dir[0] /= s;
+  dir[1] /= s;
+  dir[2] /= s;
+  return 0;
+}
+
 PetscErrorCode ibm_search_advanced(UserCtx *user, IBMNodes *ibm, 
 				   PetscInt ibi)
 
@@ -124,7 +156,9 @@ PetscErrorCode ibm_search_advanced(UserCtx *user, IBMNodes *ibm,
   PetscInt	iv_min, iv_max, jv_min, jv_max, kv_min, kv_max;
   PetscReal	***nvert;
   PetscInt	ic, jc, kc;
-  
+  char search_dir[] = "z"; // Default search direction
+  PetscOptionsGetString(PETSC_NULL, "-search_dir", search_dir,sizeof(search_dir),PETSC_NULL);
+
   lxs = xs; lxe = xe;
   lys = ys; lye = ye;
   lzs = zs; lze = ze;
@@ -254,7 +288,8 @@ PetscErrorCode ibm_search_advanced(UserCtx *user, IBMNodes *ibm,
 	  kc = floor((coor[k][j][i].z - zbp_min )/ dcz);
 	  
 	  nvert[k][j][i] =  PetscMax(nvert[k][j][i],
-				     point_cell_advanced(coor[k][j][i], ic, jc, kc, ibm, ncx, ncy, ncz, dcx, dcy, xbp_min, ybp_min, zbp_max, cell_trg, flg)); // Setting nvert.
+ 				     point_cell_advanced(coor[k][j][i], ic, jc, kc, ibm, ncx, ncy, ncz, dcx, dcy,dcz, xbp_min, ybp_min,zbp_min,xbp_max,ybp_max, zbp_max, cell_trg, flg,search_dir));
+// Setting nvert.
 	  if (nvert[k][j][i] < 0) nvert[k][j][i] = 0;
 	}
       }
@@ -585,7 +620,7 @@ PetscErrorCode ibm_search_advanced_rev(UserCtx *user, IBMNodes *ibm,
   PetscInt	mx = info.mx, my = info.my, mz = info.mz;
   PetscInt	lxs, lxe, lys, lye, lzs, lze;
 
-  PetscInt	ncx = 40, ncy = 40, ncz = 40;
+  PetscInt	ncx = 100, ncy = 100, ncz = 100;
   List          *cell_trg;
   PetscReal	xbp_min, ybp_min, zbp_min, xbp_max, ybp_max, zbp_max;
   PetscReal	*x_bp = ibm->x_bp, *y_bp = ibm->y_bp, *z_bp = ibm->z_bp;
@@ -600,7 +635,10 @@ PetscErrorCode ibm_search_advanced_rev(UserCtx *user, IBMNodes *ibm,
   PetscInt	iv_min, iv_max, jv_min, jv_max, kv_min, kv_max;
   PetscReal	***nvert;
   PetscInt	ic, jc, kc;
-
+  
+  char search_dir[] = "z"; // Default search direction
+  PetscOptionsGetString(PETSC_NULL, "-search_dir", search_dir,sizeof(search_dir),PETSC_NULL);
+  if(visflg>=0) PetscPrintf(PETSC_COMM_WORLD,"Search Direction: %s \n",search_dir); 
   lxs = xs; lxe = xe;
   lys = ys; lye = ye;
   lzs = zs; lze = ze;
@@ -649,9 +687,10 @@ PetscErrorCode ibm_search_advanced_rev(UserCtx *user, IBMNodes *ibm,
       }
     }
   }
-  //PetscPrintf(PETSC_COMM_SELF, "test0\n");
+  if(visflg>=4) PetscPrintf(PETSC_COMM_WORLD, "Initialization of cell list done \n");
+  
   for (ln_v=0; ln_v < ibm->n_elmt; ln_v++) {
-
+//    PetscPrintf(PETSC_COMM_WORLD,"ln_v: %d \n",ln_v);
     n1e = ibm->nv1[ln_v]; n2e = ibm->nv2[ln_v]; n3e = ibm->nv3[ln_v];
 
     xv_min = PetscMin(PetscMin(x_bp[n1e], x_bp[n2e]), x_bp[n3e]);
@@ -694,7 +733,7 @@ PetscErrorCode ibm_search_advanced_rev(UserCtx *user, IBMNodes *ibm,
     }
   }
 
-  //PetscPrintf(PETSC_COMM_SELF, "test001\n");
+  if(visflg==4) PetscPrintf(PETSC_COMM_WORLD, "Bounding box calculated- nodes associated with point cells \n");
 /*   List test; */
 /*   insertnode(&test, 11); */
   PetscInt rank, flg=0;
@@ -725,7 +764,7 @@ PetscErrorCode ibm_search_advanced_rev(UserCtx *user, IBMNodes *ibm,
 	     already! */
 
 	  nvert[k][j][i] =  PetscMax(nvert[k][j][i],
-				     point_cell_advanced(coor[k][j][i], ic, jc, kc, ibm, ncx, ncy, ncz, dcx, dcy, xbp_min, ybp_min, zbp_max, cell_trg, flg));
+				     point_cell_advanced(coor[k][j][i], ic, jc, kc, ibm, ncx, ncy, ncz, dcx, dcy,dcz, xbp_min, ybp_min,zbp_min,xbp_max,ybp_max, zbp_max, cell_trg, flg,search_dir));
 	  nvert[k][j][i] -=4;
 	  if (nvert[k][j][i] < 0) nvert[k][j][i] = 4;
 	} else 
@@ -735,7 +774,7 @@ PetscErrorCode ibm_search_advanced_rev(UserCtx *user, IBMNodes *ibm,
     }
   }
   
-  //PetscPrintf(PETSC_COMM_SELF, "test01 %d\n",rank);
+  if(visflg==4) PetscPrintf(PETSC_COMM_SELF, "Search undertaken for fluid and solid grid points. %d \n",rank);
   DMDAVecRestoreArray(da, user->Nvert, &nvert);
 
 /*   if (user->thislevel < user->mglevels-1) { */
@@ -1012,9 +1051,10 @@ PetscErrorCode ibm_search_advanced_rev(UserCtx *user, IBMNodes *ibm,
 PetscInt point_cell_advanced(Cmpnts p, PetscInt ip, PetscInt jp, PetscInt kp,
 			     IBMNodes *ibm, PetscInt ncx, PetscInt ncy,
 			     PetscInt ncz, PetscReal dcx, PetscReal dcy,
-			     PetscReal xbp_min, PetscReal ybp_min,
+                             PetscReal dcz,PetscReal xbp_min, PetscReal ybp_min,
+                             PetscReal zbp_min,PetscReal xbp_max,PetscReal ybp_max,
 			     PetscReal zbp_max, List *cell_trg,
-			     PetscInt flg)
+			     PetscInt flg, char *search_dir)
 {
   PetscInt	*nv1 = ibm->nv1, *nv2 = ibm->nv2, *nv3 = ibm->nv3;
   PetscReal	*nf_x = ibm->nf_x, *nf_y = ibm->nf_y, *nf_z = ibm->nf_z;
@@ -1025,16 +1065,18 @@ PetscInt point_cell_advanced(Cmpnts p, PetscInt ip, PetscInt jp, PetscInt kp,
   PetscInt	nvert_l;
   PetscReal	dt[1000], ndotn, dirdotn;
   Cmpnts        dnn[1000],nn;
-
   PetscReal	epsilon = 1.e-8;
 
   PetscBool	*Element_Searched;
-  j = jp; i = ip;   // cell search happening along k direction.
+  j = jp; i = ip,k=kp;   // cell search happening along k direction.
 
   PetscBool NotDecided = PETSC_TRUE, Singularity = PETSC_FALSE;
   PetscReal t, u, v;
   PetscReal orig[3], dir[3], vert0[3], vert1[3], vert2[3];
-
+  if(visflg==6){
+  PetscPrintf(PETSC_COMM_SELF,"Point_cell_advanced_begins \n");  
+  PetscPrintf(PETSC_COMM_SELF," search_dir: %s \n",search_dir);
+  }
   node *current;
   PetscInt searchtimes=0;
   PetscMalloc(ibm->n_elmt*sizeof(PetscBool), &Element_Searched);
@@ -1045,7 +1087,9 @@ PetscInt point_cell_advanced(Cmpnts p, PetscInt ip, PetscInt jp, PetscInt kp,
 
     searchtimes++;
     nintp = 0 ;
-    randomdirection(p, ip, jp, xbp_min, ybp_min, zbp_max, dcx, dcy, dir, searchtimes);
+    if(strcmp(search_dir,"z")==0) randomdirection_Z(p, ip, jp, xbp_min, ybp_min, zbp_max, dcx, dcy, dir, searchtimes);
+    else if(strcmp(search_dir,"y")==0) randomdirection_Y(p, ip, kp, xbp_min, zbp_min, ybp_max, dcx, dcz, dir, searchtimes);
+    if(visflg == 6) PetscPrintf(PETSC_COMM_SELF,"Randomdirection executed \n");  
     Singularity = PETSC_FALSE;
     if (flg) 
       PetscPrintf(PETSC_COMM_SELF, " serch itr, dir %d %le %le %le\n", searchtimes,dir[0],dir[1],dir[2]);
@@ -1055,6 +1099,7 @@ PetscInt point_cell_advanced(Cmpnts p, PetscInt ip, PetscInt jp, PetscInt kp,
     }
 
     //    for (ln_v=0; ln_v<ibm->n_elmt; ln_v++) {x
+    if(strcmp(search_dir,"z")==0){
     for (k=kp; k<ncz; k++) {
       current = cell_trg[k*ncx*ncy+j*ncx+i].head;
       while (current) {
@@ -1115,7 +1160,72 @@ PetscInt point_cell_advanced(Cmpnts p, PetscInt ip, PetscInt jp, PetscInt kp,
       if (Singularity) {
 	break;
       }
-    } // for k
+     } // for k
+    } // if(search_dir == "z")
+    else if(strcmp(search_dir,"y")==0){
+     for (j=jp; j<ncy; j++) {
+      current = cell_trg[k*ncx*ncy+j*ncx+i].head;
+      while (current) {
+	ln_v = current->Node;
+	if (!Element_Searched[ln_v]) {
+	  Element_Searched[ln_v] = PETSC_TRUE;
+	  n1e = nv1[ln_v]; n2e = nv2[ln_v]; n3e = nv3[ln_v];
+	  nn.x=nf_x[ln_v]; nn.y=nf_y[ln_v]; nn.z=nf_z[ln_v];
+
+	  orig[0] = p.x; orig[1] = p.y, orig[2] = p.z;
+
+	  vert0[0] = x_bp[n1e]; vert0[1] = y_bp[n1e]; vert0[2] = z_bp[n1e];
+	  vert1[0] = x_bp[n2e]; vert1[1] = y_bp[n2e]; vert1[2] = z_bp[n2e];
+	  vert2[0] = x_bp[n3e]; vert2[1] = y_bp[n3e]; vert2[2] = z_bp[n3e];
+            
+	  dirdotn=dir[0]*nn.x+dir[1]*nn.y+dir[2]*nn.z;
+
+	  nvert_l = intsect_triangle(orig, dir, vert0, vert1, vert2, &t, &u, &v);
+	  /*
+	  if (nvert_l>1) {
+	    Singularity=PETSC_TRUE;
+	    break;
+	  }
+	  */
+
+	  if (flg) 
+	    PetscPrintf(PETSC_COMM_SELF, "elm, %d %d %le %le %le %d %d %d %le\n",ln_v,nvert_l,t,u,v,n1e,n2e,n3e,dirdotn);
+	  
+	  if (nvert_l > 0 && t>0) {
+	    dt[nintp] = t;
+	    dnn[nintp].x=nn.x;dnn[nintp].y=nn.y;dnn[nintp].z=nn.z;
+
+	    nintp ++;
+	    PetscInt temp;
+	    for (temp = 0; temp < nintp-1; temp++) {
+	      // Two interception points are the same, this leads to huge
+	      // trouble for crossing number test
+	      // Rather to program for all cases, we use a new line to
+	      // repeat the test
+	      ndotn=dnn[temp].x*nn.x+dnn[temp].y*nn.y+dnn[temp].z*nn.z;	      
+	      
+	      if ((fabs(t-dt[temp]) < epsilon && ndotn>-0.97)){ 
+		  //   || fabs(dirdotn)<eps_tangent) {
+		//if (fabs(t-dt[temp]) < epsilon) {
+		Singularity = PETSC_TRUE;
+	      }
+	    }
+	    if (Singularity) break;
+	  }
+	}
+	if (Singularity) {
+	  break;
+	}
+	else {
+	  current = current->next;
+	}
+	} // Search through the list
+      if (Singularity) {
+	break;
+      }
+     }   
+    } // if(search_dir == "y")
+    
     if (flg) 
       PetscPrintf(PETSC_COMM_SELF, " serch itr, %d %le \n",nintp,dirdotn);
 
diff --git a/ibm.o b/ibm.o
index 954a9f1..cc7bc1a 100644
Binary files a/ibm.o and b/ibm.o differ
diff --git a/ibm_io.c b/ibm_io.c
index 8f22a80..6aa5ccf 100644
--- a/ibm_io.c
+++ b/ibm_io.c
@@ -80,7 +80,7 @@ PetscErrorCode ibm_surface_VTKOut(IBMNodes *ibm, PetscInt ibi, PetscInt ti)
     PetscFPrintf(PETSC_COMM_WORLD, f, "ASCII\n");
     PetscFPrintf(PETSC_COMM_WORLD, f, "DATASET UNSTRUCTURED_GRID\n");
 //    PetscPrintf(PETSC_COMM_WORLD,"Surface file headers done!\n"); 
-    PetscPrintf(PETSC_COMM_WORLD,"Number of nodes is %d \n",ibm->n_v);
+//    PetscPrintf(PETSC_COMM_WORLD,"Number of nodes is %d \n",ibm->n_v);
     PetscFPrintf(PETSC_COMM_WORLD, f, "POINTS  %d float\n",ibm->n_v);
     for (i=0; i<ibm->n_v; i++) {
       PetscFPrintf(PETSC_COMM_WORLD, f, "%f %f %f\n", ibm->x_bp[i],ibm->y_bp[i],ibm->z_bp[i]);
diff --git a/ibm_io.o b/ibm_io.o
index cb02b2a..0add429 100644
Binary files a/ibm_io.o and b/ibm_io.o differ
diff --git a/implicitsolver.c b/implicitsolver.c
index c065185..3dab9c4 100644
--- a/implicitsolver.c
+++ b/implicitsolver.c
@@ -4006,7 +4006,7 @@ PetscErrorCode ImplicitMomentumSolver(UserCtx *user, IBMNodes *ibm,
 	//Get the direction 
 	//0==i dir, 1==j dir, 2==k dir
 	for (dir=0;dir<3;dir++){
-          PetscPrintf(PETSC_COMM_WORLD," Implicit Momentum Solver: stage - %d, direction - %d \n",istage,dir);
+          if(visflg)  PetscPrintf(PETSC_COMM_WORLD," Implicit Momentum Solver: stage - %d, direction - %d \n",istage,dir);
 	  // Set the LHS	 
 	  ImplicitSolverLHSnew05(&(user[bi]), ibm,  Ucont_i[bi], dir, alfa[istage]);
 	 
diff --git a/implicitsolver.o b/implicitsolver.o
index ef7d368..fe52578 100644
Binary files a/implicitsolver.o and b/implicitsolver.o differ
diff --git a/main.c b/main.c
index e2ba86f..badec7c 100644
--- a/main.c
+++ b/main.c
@@ -609,6 +609,8 @@ int main(int argc, char **argv) {
   FE	     *fem;
 
   PetscInitialize(&argc, &argv, (char *)0, help);
+
+//  PetscPrintf(PETSC_COMM_WORLD,"Reading control.dat \n");
 // ------- INPUT PARAMETERS ----------------------
   PetscOptionsInsertFile(PETSC_COMM_WORLD, "control.dat", PETSC_TRUE);
   PetscOptionsGetInt(PETSC_NULL, "-vis_flg", &visflg, PETSC_NULL);
@@ -697,7 +699,7 @@ int main(int argc, char **argv) {
 
   PetscOptionsGetString(PETSC_NULL, "-orient", orient,sizeof(orient),PETSC_NULL);
   PetscOptionsGetString(PETSC_NULL, "-g_orient", gridrotorient,sizeof(orient),PETSC_NULL);   
-  
+  if(visflg==5) PetscPrintf(PETSC_COMM_WORLD,"control.dat read \n");  
   PetscReal compute_time,time_start,time_end;
   if(visflg)  PetscPrintf(PETSC_COMM_WORLD, "Data is output for every %d timesteps; Implicit Solver Tolerances: Absolute-%le; Relative- %le\n",tiout, imp_atol,imp_rtol);
   PetscTime(&time_start);
@@ -709,16 +711,16 @@ int main(int argc, char **argv) {
 //    CMz_c=0.;CMy_c=0.;CMx_c=0.;  // Geometric center of immersed   boundary. 
 } 
   else  L_dim=1.; 
-
+  if(visflg==5) PetscPrintf(PETSC_COMM_WORLD,"Ldim setup\n"); 
   if (immersed) {  // If an immersed boundary exists, allocate memory for IBMNodes and FSInfo (data-types), then call the FsiInitialize() function.
     PetscMalloc(NumberOfBodies*sizeof(IBMNodes), &ibm);
     PetscMalloc(NumberOfBodies*sizeof(FSInfo), &fsi);
     for (ibi=0;ibi<NumberOfBodies;ibi++)
          FsiInitialize(0, &fsi[ibi], ibi);     
   }
-
+  if(visflg==5) PetscPrintf(PETSC_COMM_WORLD,"memory allocated for ibmnodes \n"); 
   MG_Initial(&usermg, ibm); // Call the Multi-grid initialize function that creates the grid, also initializes the fda, da and other data structures.
-  
+  if(visflg==5) PetscPrintf(PETSC_COMM_WORLD,"MG_Initial completed \n"); 
   if (immersed) {
     level = usermg.mglevels-1;
     user = usermg.mgctx[level].user;
@@ -733,13 +735,15 @@ int main(int argc, char **argv) {
 //------------------ READ IBM DATA -------------------------------------------------
     ibi = 0;
     ibm_read_Icem(&ibm[ibi],ibi);  // This function reads the grid either from grid.dat or from the cartesian grid setup in the control file. 
+    if(visflg==5) PetscPrintf(PETSC_COMM_WORLD,"IBM Read complete \n"); 
     if(rotatefsi)  Elmt_Move_FSI_ROT(&fsi[ibi], &ibm[ibi],user[bi].dt,ibi); // Rotate the immersed boundary if rotation is turned  on.
     ibm_surface_VTKOut(&ibm[ibi],ibi,0); // This function generates the VTK file that can be used to visualize the immersed boundary surface on ParaVi
+    if(visflg==5)PetscPrintf(PETSC_COMM_WORLD,"IBM Surface Out complete \n");   
     PetscBarrier(PETSC_NULL);   
 //----------------------------------------------------------------------------------
     ti = 0;
     if (rstart_flg) ti = tistart;
-    } // if immersed
+    } // if immersed 
   //--------------- RESTART setup: if Restarting -----------------------------------
   level = usermg.mglevels-1;
   user = usermg.mgctx[level].user;
diff --git a/testt b/testt
index 96b0cac..7431a33 100755
Binary files a/testt and b/testt differ
